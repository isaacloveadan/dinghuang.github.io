---
layout: default
title:  "设计模式"
date:   2018-07-18 09:43:00
categories: main
---
目录
==

* TOC
{:toc}

[菜鸟教程文档](http://www.runoob.com/design-pattern/design-pattern-tutorial.html)

#   设计模式

设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。

设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。

[代码案例][1]

1.创建型模式
--------------------------------------------------
这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。
### 1.1. 工厂模式

**主要解决**：主要解决接口选择的问题。

**何时使用**：我们明确地计划不同条件下创建不同实例时。

**优点**：
 1. 一个调用者想创建一个对象，只要知道其名称就可以了
 2. 扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以
 3. 屏蔽产品的具体实现，调用者只关心产品的接口

**缺点**：每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。

**如何解决**：让其子类实现工厂接口，返回的也是一个抽象的产品。

**使用场景**： 1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。 2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。 3、设计一个连接服务器的框架，需要三个协议，"POP3"、"IMAP"、"HTTP"，可以把这三个作为产品类，共同实现一个接口。

**注意事项**：作为一种创建类模式，在任何需要生成复杂对象的地方，都可以使用工厂方法模式。有一点需要注意的地方就是复杂对象适合使用工厂模式，而简单对象，特别是只需要通过 new 就可以完成创建的对象，无需使用工厂模式。如果使用工厂模式，就需要引入一个工厂类，会增加系统的复杂度。

```
public interface Car {
    void run();
}

public class ExpensiveCar implements Car {
    @Override
    public void run() {
        System.out.println("expensiveCar.run");
    }
}

public class LitterCar implements Car {

    @Override
    public void run() {
        System.out.println("littleCard.run");
    }
}

public class CarFactory {
    public Car getCar(String type) {
        if (type == null) {
            return null;
        }
        if (type.equals("litterCar")) {
            return new LitterCar();
        } else if (type.equals("ExpensiveCar")) {
            return new ExpensiveCar();
        }
        return null;
    }
}
```
### 1.2. 抽象工厂模式

**主要解决**：主要解决接口选择的问题。

**何时使用**：系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。

**优点**：当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。

**缺点**：产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。

**使用场景**： 1、QQ 换皮肤，一整套一起换。 2、生成不同操作系统的程序。

**注意事项**：产品族难扩展，产品等级易扩展。

```
public interface Car {
    void run();
}

public class ExpensiveCar implements Car {
    @Override
    public void run() {
        System.out.println("expensiveCar.run");
    }
}

public class LitterCar implements Car {

    @Override
    public void run() {
        System.out.println("littleCard.run");
    }
}

public interface Passengers {
    void getCar();
}

public class Man implements Passengers {
    @Override
    public void getCar() {
        System.out.println("man.getCar");
    }
}

public class Woman implements Passengers {
    @Override
    public void getCar() {
        System.out.println("man.getCar");
    }
}

public abstract class AbstractFactory {
    public abstract Passengers getPassengers(String user);
    public abstract Car getCar(String car);
}

public class CarFactory extends AbstractFactory{
    @Override
    public Passengers getPassengers(String user) {
        return null;
    }

    @Override
    public Car getCar(String type) {
        if (type == null) {
            return null;
        }
        if (type.equals("litterCar")) {
            return new LitterCar();
        } else if (type.equals("ExpensiveCar")) {
            return new ExpensiveCar();
        }
        return null;
    }
}


public class PassengerFactory extends AbstractFactory {
    @Override
    public Passengers getPassengers(String user) {
        if (user == null) {
            return null;
        }
        if (user.equals("man")) {
            return new Man();
        } else if (user.equals("woman")) {
            return new Woman();
        }
        return null;
    }

    @Override
    public Car getCar(String car) {
        return null;
    }
}

public class FactoryProducer {
    public static AbstractFactory getFactory(String choice) {
        if (choice.equalsIgnoreCase("Car")) {
            return new CarFactory();
        } else if (choice.equalsIgnoreCase("Passenger")) {
            return new PassengerFactory();
        }
        return null;
    }
}

```
### 1.3. 单例模式

**主要解决**：一个全局使用的类频繁地创建与销毁。

**何时使用**：当您想控制实例数目，节省系统资源的时候。

**优点**：
 1. 在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）
 2. 避免对资源的多重占用（比如写文件操作）

缺点：没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。

**使用场景**：
 1. 要求生产唯一序列号。
 2. WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。
 3. 创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。

**注意事项**：getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。

```
/**
 * 饿汉式
 * 是否 Lazy 初始化：否
 * <p>
 * 是否多线程安全：是
 * <p>
 * 实现难度：易
 * <p>
 * 描述：这种方式比较常用，但容易产生垃圾对象。
 * 优点：没有加锁，执行效率会提高。
 * 缺点：类加载时就初始化，浪费内存。
 * 它基于 classloader 机制避免了多线程的同步问题，不过，instance 在类装载时就实例化，虽然导致类装载的原因有很多
 * 种，在单例模式中大多数都是调用 getInstance 方法， 但是也不能确定有其他的方式（或者其他的静态方法）导致类装载，
 * 这时候初始化 instance 显然没有达到 lazy loading 的效果。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public class User {

    private static User user = new User();

    //让构造函数私有化，这样该类不会被实例化
    private User() {
    }

    public static User getUser() {
        return user;
    }

    public void showMessage() {
        System.out.println("What???");
    }
}

/**
 * 懒汉式，线程不安全
 * 是否 Lazy 初始化：是
 * <p>
 * 是否多线程安全：否
 * <p>
 * 实现难度：易
 * <p>
 * 描述：这种方式是最基本的实现方式，这种实现最大的问题就是不支持多线程。因为没有加锁 synchronized，所以严格意义上它并不算单例模式。
 * 这种方式 lazy loading 很明显，不要求线程安全，在多线程不能正常工作。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public class User {

    private static User user;
    
    //让构造函数私有化，这样该类不会被实例化
    private User() {
    }

    public static User getUser() {
        if (user == null) {
            System.out.println("no user");
            user = new User();
        }
        return user;
    }

    public void showMessage() {
        System.out.println("What???");
    }
}

/**
 * 懒汉式，线程安全
 * 是否 Lazy 初始化：是
 * <p>
 * 是否多线程安全：是
 * <p>
 * 实现难度：易
 * <p>
 * 描述：这种方式具备很好的 lazy loading，能够在多线程中很好的工作，但是，效率很低，99% 情况下不需要同步。
 * 优点：第一次调用才初始化，避免内存浪费。
 * 缺点：必须加锁 synchronized 才能保证单例，但加锁会影响效率。
 * getInstance() 的性能对应用程序不是很关键（该方法使用不太频繁）。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public class User {

    private static User user;

    //让构造函数私有化，这样该类不会被实例化
    private User() {
    }

    public static synchronized User getUser() {
        if (user == null) {
            System.out.println("no User");
            user = new User();
        }
        return user;
    }

    public void showMessage() {
        System.out.println("What???");
    }
}

/**
 * 双检锁/双重校验锁（DCL，即 double-checked locking）
 * JDK 版本：JDK1.5 起
 * <p>
 * 是否 Lazy 初始化：是
 * <p>
 * 是否多线程安全：是
 * <p>
 * 实现难度：较复杂
 * <p>
 * 描述：这种方式采用双锁机制，安全且在多线程情况下能保持高性能。
 * getInstance() 的性能对应用程序很关键。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public class User {

    private static User user;

    //让构造函数私有化，这样该类不会被实例化
    private User() {
    }

    public static User getUser() {
        if (user == null) {
            synchronized (User.class) {
                if (user == null) {
                    System.out.println("no User");
                    user = new User();

                }
            }
        }
        return user;
    }

    public void showMessage() {
        System.out.println("What???");
    }
}

/**
 * 登记式/静态内部类
 * 是否 Lazy 初始化：是
 * <p>
 * 是否多线程安全：是
 * <p>
 * 实现难度：一般
 * <p>
 * 描述：这种方式能达到双检锁方式一样的功效，但实现更简单。对静态域使用延迟初始化，应使用这种方式而不是双检锁方式
 * 。这种方式只适用于静态域的情况，双检锁方式可在实例域需要延迟初始化时使用。
 * 这种方式同样利用了 classloader 机制来保证初始化 instance 时只有一个线程，它跟第 3 种方式不同的是：
 * 第 3 种方式只要 Singleton 类被装载了，那么 instance 就会被实例化（没有达到 lazy loading 效果）
 * ，而这种方式是 Singleton 类被装载了，instance 不一定被初始化。因为 SingletonHolder 类没有被主动使用，
 * 只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance。想象一下，
 * 如果实例化 instance 很消耗资源，所以想让它延迟加载，另外一方面，又不希望在 Singleton 类加载
 * 时就实例化，因为不能确保 Singleton 类还可能在其他的地方被主动使用从而被加载，那么这个时候实
 * 例化 instance 显然是不合适的。这个时候，这种方式相比第 3 种方式就显得很合理。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public class User {

    private static class UserHolder {
        private static final User user = new User();
    }

    private User() {
    }

    public static final User getUser() {
        return UserHolder.user;
    }

}


public class SingletonTest {
    public static void main(String[] args) {
        //不合法的构造函数
        //编译时错误：构造函数 User() 是私有的
//        User user = new User();
        Runnable runnable = () -> {
            //枚举单例
//          User.USER.sendMessage();
            User user = User.getUser();
            user.showMessage();
        };
        IntStream.range(0, 100)
                .forEach(i -> {
                    Thread thread = new Thread(runnable);
                    thread.start();
                });

    }
}

```
一般情况下，不建议使用懒汉方式，建议使用饿汉方式。只有在要明确实现 lazy loading 效果时，才会使用登记方式。如果涉及到反序列化创建对象时，可以尝试使用枚举方式。如果有其他特殊的需求，可以考虑使用双检锁方式。

### 1.4. 建造者模式

建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。

一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。

**主要解决**：主要解决在软件系统中，有时候面临着"一个复杂对象"的创建工作，其通常由各个部分的子对象用一定的算法构成；由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。

**何时使用**：一些基本部件不会变，而其组合经常变化的时候。

**如何解决**：将变与不变分离开。

**应用实例**：
 1. 去肯德基，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出所谓的"套餐"
 2. JAVA 中的 StringBuilder

**优点**： 
 1. 建造者独立，易扩展
 2. 便于控制细节风险

**缺点**：
 1. 产品必须有共同点，范围有限制
 2. 如内部变化复杂，会有很多的建造类

**使用场景**： 
 1. 需要生成的对象具有复杂的内部结构
 2. 需要生成的对象内部属性本身相互依赖

**注意事项**：与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。

```
public interface Product {
    public String name();
    public float price();
    public Production production();
}


public interface Production {

    public String production();
}

public class Hand implements Production{

    @Override
    public String production() {
        return "hand";
    }
}

public class Machine implements Production {
    @Override
    public String production() {
        return "Machine";
    }
}

public abstract class Windows implements Product{

    @Override
    public Production production(){
        return new Hand();
    }

    @Override
    public abstract float price();
}

public abstract class Mac implements Product{
    @Override
    public Production production(){
        return new Machine();
    }

    @Override
    public abstract float price();
}

public class WindowsSystem extends Windows{
    @Override
    public String name() {
        return "windowsSystem";
    }

    @Override
    public float price() {
        return 25.0f;
    }
}

public class MacSystem extends Mac {
    @Override
    public String name() {
        return "macSystem";
    }

    @Override
    public float price() {
        return 30.0f;
    }
}

public class SystemProduct {

    private List<Product> products = new ArrayList<>();

    public void addProduct(Product product) {
        products.add(product);
    }

    public float getCost() {
        float cost = 0.0f;
        for (Product product : products) {
            cost += product.price();
        }
        return cost;
    }

    public void showProducts() {
        for (Product product : products) {
            System.out.print("Product : " + product.name());
            System.out.print(",Production : " + product.production().production());
            System.out.println(", Price : " + product.price());
        }
    }
}

public class SystemProductBuilder {

    public SystemProduct prepareMacSystem() {
        SystemProduct systemProduct = new SystemProduct();
        systemProduct.addProduct(new MacSystem());
        return systemProduct;
    }

    public SystemProduct prepareWindowsSystem() {
        SystemProduct systemProduct = new SystemProduct();
        systemProduct.addProduct(new WindowsSystem());
        return systemProduct;
    }
}

public class BuilderTest {
    public static void main(String[] args) {
        SystemProductBuilder systemProductBuilder = new SystemProductBuilder();
        SystemProduct windows = systemProductBuilder.prepareMacSystem();
        System.out.println("windows product");
        windows.showProducts();
        System.out.println("Total Cost: " + windows.getCost());

        SystemProduct allSystem = systemProductBuilder.prepareAllSystem();
        System.out.println("allSystem");
        allSystem.showProducts();
        System.out.println("Total Cost: " + allSystem.getCost());
    }
}

```
### 1.5. 原型模式

原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。

这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。

**主要解决**：在运行期建立和删除原型。

**何时使用**： 
 1. 当一个系统应该独立于它的产品创建，构成和表示时
 2. 当要实例化的类是在运行时刻指定时，例如，通过动态装载
 3. 为了避免创建一个与产品类层次平行的工厂类层次时
 4. 当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些

**如何解决**：利用已有的一个原型对象，快速地生成和原型对象一样的实例。

**应用实例**：
 1. 细胞分裂
 2. JAVA 中的 Object clone() 方法

**优点**： 
 1. 性能提高
 2. 逃避构造函数的约束

**缺点**：
 1. 配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候
 2. 必须实现 Cloneable 接口

**使用场景**： 
 1. 资源优化场景
 2. 类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等 性能和安全要求的场景
 3. 通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式 一个对象多个修改者的场景
 4. 一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用
 5. 在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone
    的方法创建一个对象，然后由工厂方法提供给调用者。原型模式已经与 Java 融为浑然一体，大家可以随手拿来使用

**注意事项**：与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。
```
/**
 * 创建一个抽象类 Prototype 和扩展了 Prototype 类的实体类。下一步是定义类 PrototypeCache，该类把 Prototype
 * 对象存储在一个 Hashtable 中，并在请求的时候返回它们的克隆。
 *
 * @author dinghuang123@gmail.com
 * @since 2018/7/18
 */
public abstract class Prototype implements Cloneable{

    private String id;

    private String type;

    abstract void operation();

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @Override
    public Object clone(){
        Object clone = null;
        try{
            clone = super.clone();
        }catch (CloneNotSupportedException e){
            e.printStackTrace();
        }
        return clone;
    }
}

public class PrototypeOne extends Prototype {

    public PrototypeOne(){
        type = "prototypeOne";
    }

    @Override
    void operation() {
        System.out.println("Inside PrototypeOne::draw() method.");
    }
}

public class PrototypeTwo extends Prototype {

    public PrototypeTwo() {
        type = "prototypeTwo";
    }

    @Override
    void operation() {
        System.out.println("Inside PrototypeTwo::draw() method.");
    }
}

public class PrototypeCache {

    private static Hashtable<String,Prototype> propertyMap =
            new Hashtable<>();

    public static Prototype getProperType(String id){
        Prototype cachePrototype = propertyMap.get(id);
        return (Prototype) cachePrototype.clone();
    }

    public static void loadCache() {
        PrototypeOne prototypeOne = new PrototypeOne();
        prototypeOne.setId("1");
        propertyMap.put(prototypeOne.getId(),prototypeOne);
        PrototypeTwo prototypeTwo = new PrototypeTwo();
        prototypeTwo.setId("2");
        propertyMap.put(prototypeTwo.getId(),prototypeTwo);
    }
}

public class PrototypeTest {

    public static void main(String[] args) {
        PrototypeCache.loadCache();
        PrototypeOne prototypeOne = (PrototypeOne) PrototypeCache.getProperType("1");
        System.out.println("Prototype : " + prototypeOne.getType());
        PrototypeTwo prototypeTwo = (PrototypeTwo) PrototypeCache.getProperType("2");
        System.out.println("Prototype : " + prototypeTwo.getType());
    }
}
```


2.结构型模式
--------------------------------------------------


这些设计模式关注类和对象的组合。继承的概念被用来组合接口和定义组合对象获得新功能的方式。

### 2.1. 适配器模式
适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于结构型模式，它结合了两个独立接口的功能。

这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡。

我们通过下面的实例来演示适配器模式的使用。其中，音频播放器设备只能播放 mp3 文件，通过使用一个更高级的音频播放器来播放 vlc 和 mp4 文件。

**主要解决**：主要解决在软件系统中，常常要将一些"现存的对象"放到新的环境中，而新环境要求的接口是现对象不能满足的。

**何时使用**： 
 1. 系统需要使用现有的类，而此类的接口不符合系统的需要
 2. 想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口
 3. 通过接口转换，将一个类插入另一个类系中（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口）

**如何解决**：继承或依赖（推荐）。

**应用实例**：
 1. 美国电器 110V，中国 220V，就要有一个适配器将 110V 转化为 220V
 2. JAVA JDK 1.1 提供了 Enumeration 接口，而在 1.2 中提供了 Iterator 接口，想要使用 1.2 的JDK，则要将以前系统的 Enumeration 接口转化为 Iterator 接口，这时就需要适配器模式
 3. 在 LINUX 上运行 WINDOWS 程序
 4. JAVA 中的 jdbc

**优点**：

 1. 可以让任何两个没有关联的类一起运行
 2. 提高了类的复用
 3. 增加了类的透明度
 4. 灵活性好

**缺点**： 

 1. 过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构

 2. 由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类

**使用场景**：有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。

**注意事项**：适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。

```
public interface MediaPlayer {
    public void play(String audioType, String fileName);
}

public interface AdvancedMediaPlayer {
    public void playVlc(String fileName);

    public void playMp4(String fileName);
}

public class VlcPlayer implements AdvancedMediaPlayer {
    @Override
    public void playVlc(String fileName) {
        System.out.println("Playing vlc file. Name: " + fileName);
    }

    @Override
    public void playMp4(String fileName) {
        //do nothing
    }
}

public class Mp4Player implements AdvancedMediaPlayer {
    @Override
    public void playVlc(String fileName) {
        //do Nothing
    }

    @Override
    public void playMp4(String fileName) {
        System.out.println("Playing mp4 file. Name: " + fileName);
    }
}

public class MediaAdapter implements MediaPlayer {

    AdvancedMediaPlayer advancedMusicPlayer;

    public MediaAdapter(String audioType) {
        if (audioType.equalsIgnoreCase("vlc")) {
            advancedMusicPlayer = new VlcPlayer();
        } else if (audioType.equalsIgnoreCase("mp4")) {
            advancedMusicPlayer = new Mp4Player();
        }
    }

    @Override
    public void play(String audioType, String fileName) {
        if (audioType.equalsIgnoreCase("vlc")) {
            advancedMusicPlayer.playVlc(fileName);
        } else if (audioType.equalsIgnoreCase("mp4")) {
            advancedMusicPlayer.playMp4(fileName);
        }
    }
}

public class AudioPlayer implements MediaPlayer {

    MediaAdapter mediaAdapter;

    @Override
    public void play(String audioType, String fileName) {

        //播放 mp3 音乐文件的内置支持
        if(audioType.equalsIgnoreCase("mp3")){
            System.out.println("Playing mp3 file. Name: "+ fileName);
        }
        //mediaAdapter 提供了播放其他文件格式的支持
        else if(audioType.equalsIgnoreCase("vlc")
                || audioType.equalsIgnoreCase("mp4")){
            mediaAdapter = new MediaAdapter(audioType);
            mediaAdapter.play(audioType, fileName);
        }
        else{
            System.out.println("Invalid media. "+
                    audioType + " format not supported");
        }
    }
}

public class AdapterTest {
    public static void main(String[] args) {
        AudioPlayer audioPlayer = new AudioPlayer();
        audioPlayer.play("mp3", "beyond the horizon.mp3");
        audioPlayer.play("mp4", "alone.mp4");
        audioPlayer.play("vlc", "far far away.vlc");
        audioPlayer.play("avi", "mind me.avi");
    }
}
```
### 2.2. 桥接模式

桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。

这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。

**主要解决**：在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。

**何时使用**：实现系统可能有多个角度分类，每一种角度都可能变化。

**如何解决**：把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。

**应用实例**： 
 1. 猪八戒从天蓬元帅转世投胎到猪，转世投胎的机制将尘世划分为两个等级，即：灵魂和肉体，前者相当于抽象化，后者相当于实现化。生灵通过功能的委派，调用肉体对象的功能，使得生灵可以动态地选择
 2. 墙上的开关，可以看到的开关是抽象的，不用管里面具体怎么实现的

**优点**： 
 1. 抽象和实现的分离
 2. 优秀的扩展能力
 3. 实现细节对客户透明

**缺点**：桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。

**使用场景**： 
 1. 如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系
 2. 对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用
 3. 一个类存在两个独立变化的维度，且这两个维度都需要进行扩展

**注意事项**：对于两个独立变化的维度，使用桥接模式再适合不过了。

```
public interface DrawAPI {
    public void drawCircle(int radius, int x, int y);
}

public class RedCircle implements DrawAPI {

    @Override
    public void drawCircle(int radius, int x, int y) {
        System.out.println("Drawing Circle[ color: red, radius: "
                + radius +", x: " +x+", "+ y +"]");
    }
}

public class GreenCircle implements DrawAPI {

    @Override
    public void drawCircle(int radius, int x, int y) {
        System.out.println("Drawing Circle[ color: green, radius: "
                + radius + ", x: " + x + ", " + y + "]");
    }
}

public abstract class Shape {

    protected DrawAPI drawAPI;

    protected Shape(DrawAPI drawAPI) {
        this.drawAPI = drawAPI;
    }

    public abstract void draw();
}


public class Circle extends Shape {

    private int x, y, radius;

    public Circle(int x, int y, int radius, DrawAPI drawAPI) {
        super(drawAPI);
        this.x = x;
        this.y = y;
        this.radius = radius;
    }

    @Override
    public void draw() {
        drawAPI.drawCircle(radius, x, y);
    }
}

public class BridgeTest {

    public static void main(String[] args) {
        Shape redCircle = new Circle(100, 100, 10, new RedCircle());
        Shape greenCircle = new Circle(100, 100, 10, new GreenCircle());

        redCircle.draw();
        greenCircle.draw();
    }
}

```
### 2.3. 桥接模式

过滤器模式（Filter Pattern）或标准模式（Criteria Pattern）是一种设计模式，这种模式允许开发人员使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来。这种类型的设计模式属于结构型模式，它结合多个标准来获得单一标准。

```
public class Person {
   
   private String name;
   private String gender;
   private String maritalStatus;
 
   public Person(String name,String gender,String maritalStatus){
      this.name = name;
      this.gender = gender;
      this.maritalStatus = maritalStatus;    
   }
 
   public String getName() {
      return name;
   }
   public String getGender() {
      return gender;
   }
   public String getMaritalStatus() {
      return maritalStatus;
   }  
}

public interface Criteria {

    public List<Person> meetCriteria(List<Person> persons);
}

public class CriteriaMale implements Criteria {

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        return persons.stream().filter(person -> person.getGender()
                .equalsIgnoreCase("MALE")).collect(Collectors.toList());
    }
}

public class CriteriaFemale implements Criteria {

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        return persons.stream().filter(person -> person.getGender()
                .equalsIgnoreCase("FEMALE")).collect(Collectors.toList());
    }
}

public class CriteriaSingle implements Criteria {

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        return persons.stream().filter(person -> person.getMaritalStatus()
                .equalsIgnoreCase("SINGLE")).collect(Collectors.toList());
    }
}

public class AndCriteria implements Criteria {

    private Criteria criteria;
    private Criteria otherCriteria;

    public AndCriteria(Criteria criteria, Criteria otherCriteria) {
        this.criteria = criteria;
        this.otherCriteria = otherCriteria;
    }

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        List<Person> firstCriteriaPersons = criteria.meetCriteria(persons);
        return otherCriteria.meetCriteria(firstCriteriaPersons);
    }
}

public class OrCriteria implements Criteria {

    private Criteria criteria;
    private Criteria otherCriteria;

    public OrCriteria(Criteria criteria, Criteria otherCriteria) {
        this.criteria = criteria;
        this.otherCriteria = otherCriteria;
    }

    @Override
    public List<Person> meetCriteria(List<Person> persons) {
        List<Person> firstCriteriaItems = criteria.meetCriteria(persons);
        List<Person> otherCriteriaItems = otherCriteria.meetCriteria(persons);

        for (Person person : otherCriteriaItems) {
            if(!firstCriteriaItems.contains(person)){
                firstCriteriaItems.add(person);
            }
        }
        return firstCriteriaItems;
    }
}

public class CriteriaTest {

    public static void main(String[] args) {
        List<Person> persons = new ArrayList<Person>();

        persons.add(new Person("Robert","Male", "Single"));
        persons.add(new Person("John","Male", "Married"));
        persons.add(new Person("Laura","Female", "Married"));
        persons.add(new Person("Diana","Female", "Single"));
        persons.add(new Person("Mike","Male", "Single"));
        persons.add(new Person("Bobby","Male", "Single"));

        Criteria male = new CriteriaMale();
        Criteria female = new CriteriaFemale();
        Criteria single = new CriteriaSingle();
        Criteria singleMale = new AndCriteria(single, male);
        Criteria singleOrFemale = new OrCriteria(single, female);

        System.out.println("Males: ");
        printPersons(male.meetCriteria(persons));

        System.out.println("\nFemales: ");
        printPersons(female.meetCriteria(persons));

        System.out.println("\nSingle Males: ");
        printPersons(singleMale.meetCriteria(persons));

        System.out.println("\nSingle Or Females: ");
        printPersons(singleOrFemale.meetCriteria(persons));
    }

    public static void printPersons(List<Person> persons){
        for (Person person : persons) {
            System.out.println("Person : [ Name : " + person.getName()
                    +", Gender : " + person.getGender()
                    +", Marital Status : " + person.getMaritalStatus()
                    +" ]");
        }
    }
}


```

### 2.4. 组合模式

组合模式（Composite Pattern），又叫部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。

这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。

我们通过下面的实例来演示组合模式的用法。实例演示了一个组织中员工的层次结构。

**意图**：将对象组合成树形结构以表示"部分-整体"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。

**主要解决**：它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以向处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。

**何时使用**：
 1. 您想表示对象的部分-整体层次结构（树形结构）
 2. 您希望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象

**如何解决**：树枝和叶子实现统一接口，树枝内部组合该接口。

**关键代码**：树枝内部组合该接口，并且含有内部属性 List，里面放 Component。

**应用实例**： 

 1. 算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作数、操作符和另一个操作数
 2. 在 JAVA AWT 和 SWING 中，对于 Button 和 Checkbox 是树叶，Container 是树枝

**优点**： 

1. 高层模块调用简单
2. 节点自由增加

**缺点**：在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。

**使用场景**：部分、整体场景，如树形菜单，文件、文件夹的管理。

**注意事项**：定义时为具体类。

```
public class Employee {
    private String name;
    private String dept;
    private int salary;
    private List<Employee> subordinates;

    //构造函数
    public Employee(String name,String dept, int sal) {
        this.name = name;
        this.dept = dept;
        this.salary = sal;
        subordinates = new ArrayList<>();
    }

    public void add(Employee e) {
        subordinates.add(e);
    }

    public void remove(Employee e) {
        subordinates.remove(e);
    }

    public List<Employee> getSubordinates(){
        return subordinates;
    }


    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("name", name)
                .add("dept", dept)
                .add("salary", salary)
                .add("subordinates", subordinates)
                .toString();
    }
}

public class CompositeTest {

    public static void main(String[] args) {
        Employee CEO = new Employee("John", "CEO", 30000);

        Employee headSales = new Employee("Robert", "Head Sales", 20000);

        Employee headMarketing = new Employee("Michel", "Head Marketing", 20000);

        Employee clerk1 = new Employee("Laura", "Marketing", 10000);
        Employee clerk2 = new Employee("Bob", "Marketing", 10000);

        Employee salesExecutive1 = new Employee("Richard", "Sales", 10000);
        Employee salesExecutive2 = new Employee("Rob", "Sales", 10000);

        CEO.add(headSales);
        CEO.add(headMarketing);

        headSales.add(salesExecutive1);
        headSales.add(salesExecutive2);

        headMarketing.add(clerk1);
        headMarketing.add(clerk2);

        //打印该组织的所有员工
        System.out.println(CEO);
        CEO.getSubordinates().forEach(employee -> {
            System.out.println(employee);
            employee.getSubordinates().forEach(System.out::println);
        });
    }
}
```

### 2.5. 装饰器模式

装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。

这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。

**意图**：动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。

**主要解决**：一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。

**何时使用**：在不想增加很多子类的情况下扩展类。

**如何解决**：将具体功能职责划分，同时继承装饰者模式。

**关键代码**： 
 1. Component 类充当抽象角色，不应该具体实现
 2. 修饰类引用和继承 Component 类，具体扩展类重写父类方法。

**应用实例**：
 1. 孙悟空有 72 变，当他变成"庙宇"后，他的根本还是一只猴子，但是他又有了庙宇的功能
 2. 不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。

**优点**：装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。

**缺点**：多层装饰比较复杂。

**使用场景**：
 1. 扩展一个类的功能
 2. 动态增加功能，动态撤销。

**注意事项**：可代替继承

```
public interface Decorator {
    void draw();
}

public class CircleDecorator implements Decorator {
    @Override
    public void draw() {
        System.out.println("Decorator: CircleDecorator");
    }
}

public class RedShapeDecorator extends ShapeDecorator {

    public RedShapeDecorator(Decorator decorator) {
        super(decorator);
    }

    @Override
    public void draw() {
        decorator.draw();
        setRedBorder(decorator);
    }

    private void setRedBorder(Decorator decorator) {
        System.out.println("Border Color: Red");
    }
}

public abstract class ShapeDecorator implements Decorator{

    protected Decorator decorator ;

    public ShapeDecorator(Decorator decorator){
        this.decorator = decorator;
    }
    @Override
    public void draw() {
        decorator.draw();
    }
}

public class Rectangle implements Decorator {
    @Override
    public void draw() {
        System.out.println("Decorator: Rectangle");
    }
}

public class DecoratorTest {

    public static void main(String[] args) {
        Decorator circle = new CircleDecorator();

        Decorator redCircle = new RedShapeDecorator(new CircleDecorator());

        Decorator redRectangle = new RedShapeDecorator(new Rectangle());

        System.out.println("Circle with normal border");
        circle.draw();

        out.println("\nCircle of red border");
        redCircle.draw();

        out.println("\nRectangle of red border");
        redRectangle.draw();
    }


}

```

### 2.6. 外观模式

外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于结构型模式，它向现有的系统添加一个接口，来隐藏系统的复杂性。

这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。

**意图**：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。

**主要解决**：降低访问复杂系统的内部子系统时的复杂度，简化客户端与之的接口。

**何时使用**：
 1. 客户端不需要知道系统内部的复杂联系，整个系统只需提供一个"接待员"即可
 2. 定义系统的入口。

**如何解决**：客户端不与系统耦合，外观类与系统耦合。

**关键代码**：在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。

**应用实例**：
 1. 去医院看病，可能要去挂号、门诊、划价、取药，让患者或患者家属觉得很复杂，如果有提供接待人员，只让接待人员来处理，就很方便
 2. JAVA 的三层开发模式

**优点**： 
 1. 减少系统相互依赖
 2. 提高灵活性
 3. 提高了安全性

缺点：不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。

**使用场景**：

 1. 为复杂的模块或子系统提供外界访问的模块
 2. 子系统相对独立
 3. 预防低水平人员带来的风险

**注意事项**：在层次化结构中，可以使用外观模式定义系统中每一层的入口。

```
public interface Facade {
    void draw();
}

public class RectangleFacade implements Facade {
    @Override
    public void draw() {
        System.out.println("Rectangle::draw()");
    }
}

public class SquareFacade implements Facade {
    @Override
    public void draw() {
        System.out.println("Square::draw()");
    }
}

public class FacadeMaker {

    private Facade rectangleFacade;

    private Facade squareFacade;

    public FacadeMaker(){
        rectangleFacade = new RectangleFacade();
        squareFacade = new SquareFacade();
    }

    public void drawSquare(){
        squareFacade.draw();
    }
    public void drawRectangle(){
        rectangleFacade.draw();
    }

}

public class FacadeTest {

    public static void main(String[] args) {
        FacadeMaker facadeMaker = new FacadeMaker();

        facadeMaker.drawRectangle();
        facadeMaker.drawSquare();
    }
}
```

### 2.7. 享元模式

享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，它提供了减少对象数量从而改善应用所需的对象结构的方式。

享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。

**意图**：运用共享技术有效地支持大量细粒度的对象。

**主要解决**：在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。

**何时使用**： 
 1. 系统中有大量对象
 2. 这些对象消耗大量内存
 3. 这些对象的状态大部分可以外部化
 4. 这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替
 5. 系统不依赖于这些对象身份，这些对象是不可分辨的

**如何解决**：用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。

**关键代码**：用 HashMap 存储这些对象。

**应用实例**：
 1. JAVA 中的 String，如果有则返回，如果没有则创建一个字符串保存在字符串缓存池里面
 2. 数据库的数据池

**优点**：大大减少对象的创建，降低系统的内存，使效率提高。

**缺点**：提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。

**使用场景**： 
 1. 系统有大量相似对象
 2. 需要缓冲池的场景

**注意事项**：
 1. 注意划分外部状态和内部状态，否则可能会引起线程安全问题
 2. 这些类必须有一个工厂对象加以控制
 
```
public interface Flyweight {
    void draw();
}

public class CircleFlyweight implements Flyweight {

    private String color;
    private int x;
    private int y;
    private int radius;

    public CircleFlyweight(String color){
        this.color = color;
    }

    public void setX(int x) {
        this.x = x;
    }

    public void setY(int y) {
        this.y = y;
    }

    public void setRadius(int radius) {
        this.radius = radius;
    }

    @Override
    public void draw() {
        System.out.println("Circle: Draw() [Color : " + color
                +", x : " + x +", y :" + y +", radius :" + radius);
    }
}

public class FlyweightFactory {

    private static final HashMap<String, Flyweight> circleMap = new HashMap<>();

    public static Flyweight getCircle(String color) {
        CircleFlyweight circle = (CircleFlyweight) circleMap.get(color);

        if (circle == null) {
            circle = new CircleFlyweight(color);
            circleMap.put(color, circle);
            System.out.println("Creating circle of color : " + color);
        }
        return circle;
    }
}

public class FlyweightTest {

    private static final String colors[] =
            { "Red", "Green", "Blue", "White", "Black" };
    public static void main(String[] args) {

        for(int i=0; i < 20; ++i) {
            CircleFlyweight circle =
                    (CircleFlyweight)FlyweightFactory.getCircle(getRandomColor());
            circle.setX(getRandomX());
            circle.setY(getRandomY());
            circle.setRadius(100);
            circle.draw();
        }
    }
    private static String getRandomColor() {
        return colors[(int)(Math.random()*colors.length)];
    }
    private static int getRandomX() {
        return (int)(Math.random()*100 );
    }
    private static int getRandomY() {
        return (int)(Math.random()*100);
    }
}
```

### 2.8. 代理模式

在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。

在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。

**意图**：为其他对象提供一种代理以控制对这个对象的访问。

**主要解决**：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。

**何时使用**：想在访问一个类时做一些控制。

**如何解决**：增加中间层。

**关键代码**：实现与被代理类组合。

**应用实例**：
 1. Windows 里面的快捷方式
 2. 猪八戒去找高翠兰结果是孙悟空变的，可以这样理解：把高翠兰的外貌抽象出来，高翠兰本人和孙悟空都实现了这个接口，猪八戒访问高翠兰的时候看不出来这个是孙悟空，所以说孙悟空是高翠兰代理类
 3. 买火车票不一定在火车站买，也可以去代售点
 4. 一张支票或银行存单是账户中资金的代理。支票在市场交易中用来代替现金，并提供对签发人账号上资金的控制
 5. spring aop

**优点**：
 1. 职责清晰
 2. 高扩展性
 3. 智能化

**缺点**：
 1. 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢
 2. 实现代理模式需要额外的工作，有些代理模式的实现非常复杂

**使用场景**：按职责来划分，通常有以下使用场景： 
 1. 远程代理
 2. 虚拟代理
 3. Copy-on-Write 代理
 4. 保护（Protect or Access）代理
 5. Cache代理
 6. 防火墙（Firewall）代理
 7. 同步化（Synchronization）代理
 8. 智能引用（Smart Reference）代理

注意事项：
 1. 和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口
 2. 和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制

```
public interface Image {
    void display();
}

public class RealImage implements Image {

    private String fileName;

    public RealImage(String fileName) {
        this.fileName = fileName;
        loadFromDisk(fileName);
    }

    @Override
    public void display() {
        System.out.println("Displaying " + fileName);
    }

    private void loadFromDisk(String fileName) {
        System.out.println("Loading " + fileName);
    }
}

public class ProxyImage implements Image{

    private RealImage realImage;
    private String fileName;

    public ProxyImage(String fileName){
        this.fileName = fileName;
    }

    @Override
    public void display() {
        if(realImage == null){
            realImage = new RealImage(fileName);
        }
        realImage.display();
    }
}

public class ProxyTest {
    public static void main(String[] args) {
        Image image = new ProxyImage("test_10mb.jpg");

        //图像将从磁盘加载
        image.display();
        System.out.println("");
        //图像将无法从磁盘加载
        image.display();
    }
}
```
































































 
  [1]: https://github.com/dinghuang/concurrent